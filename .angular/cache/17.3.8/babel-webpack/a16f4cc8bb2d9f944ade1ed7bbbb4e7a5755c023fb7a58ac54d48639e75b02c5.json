{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Inject, Input, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { SharedModule } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { UniqueComponentId } from 'primeng/utils';\n\n/**\n * Badge Directive is directive usage of badge component.\n * @group Components\n */\nfunction Badge_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 1);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.styleClass);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.containerClass())(\"ngStyle\", ctx_r0.style);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.value);\n  }\n}\nlet BadgeDirective = /*#__PURE__*/(() => {\n  class BadgeDirective {\n    document;\n    el;\n    renderer;\n    /**\n     * When specified, disables the component.\n     * @group Props\n     */\n    disabled;\n    /**\n     * Size of the badge, valid options are \"large\" and \"xlarge\".\n     * @group Props\n     */\n    badgeSize;\n    /**\n     * Size of the badge, valid options are \"large\" and \"xlarge\".\n     * @group Props\n     * @deprecated use badgeSize instead.\n     */\n    set size(value) {\n      this._size = value;\n      console.warn('size property is deprecated and will removed in v18, use badgeSize instead.');\n    }\n    get size() {\n      return this._size;\n    }\n    _size;\n    /**\n     * Severity type of the badge.\n     * @group Props\n     */\n    severity;\n    /**\n     * Value to display inside the badge.\n     * @group Props\n     */\n    value;\n    id;\n    get activeElement() {\n      return this.el.nativeElement.nodeName.indexOf('-') != -1 ? this.el.nativeElement.firstChild : this.el.nativeElement;\n    }\n    get canUpdateBadge() {\n      return this.id && !this.disabled;\n    }\n    constructor(document, el, renderer) {\n      this.document = document;\n      this.el = el;\n      this.renderer = renderer;\n    }\n    ngOnChanges({\n      value,\n      size,\n      severity,\n      disabled\n    }) {\n      if (disabled) {\n        this.toggleDisableState();\n      }\n      if (!this.canUpdateBadge) {\n        return;\n      }\n      if (severity) {\n        this.setSeverity(severity.previousValue);\n      }\n      if (size) {\n        this.setSizeClasses();\n      }\n      if (value) {\n        this.setValue();\n      }\n    }\n    ngAfterViewInit() {\n      this.id = UniqueComponentId() + '_badge';\n      this.renderBadgeContent();\n    }\n    setValue(element) {\n      const badge = element ?? this.document.getElementById(this.id);\n      if (!badge) {\n        return;\n      }\n      if (this.value != null) {\n        if (DomHandler.hasClass(badge, 'p-badge-dot')) {\n          DomHandler.removeClass(badge, 'p-badge-dot');\n        }\n        if (this.value && String(this.value).length === 1) {\n          DomHandler.addClass(badge, 'p-badge-no-gutter');\n        } else {\n          DomHandler.removeClass(badge, 'p-badge-no-gutter');\n        }\n      } else {\n        if (!DomHandler.hasClass(badge, 'p-badge-dot')) {\n          DomHandler.addClass(badge, 'p-badge-dot');\n        }\n        DomHandler.removeClass(badge, 'p-badge-no-gutter');\n      }\n      badge.innerHTML = '';\n      const badgeValue = this.value != null ? String(this.value) : '';\n      this.renderer.appendChild(badge, this.document.createTextNode(badgeValue));\n    }\n    setSizeClasses(element) {\n      const badge = element ?? this.document.getElementById(this.id);\n      if (!badge) {\n        return;\n      }\n      if (this.badgeSize) {\n        if (this.badgeSize === 'large') {\n          DomHandler.addClass(badge, 'p-badge-lg');\n          DomHandler.removeClass(badge, 'p-badge-xl');\n        }\n        if (this.badgeSize === 'xlarge') {\n          DomHandler.addClass(badge, 'p-badge-xl');\n          DomHandler.removeClass(badge, 'p-badge-lg');\n        }\n      } else if (this.size && !this.badgeSize) {\n        if (this.size === 'large') {\n          DomHandler.addClass(badge, 'p-badge-lg');\n          DomHandler.removeClass(badge, 'p-badge-xl');\n        }\n        if (this.size === 'xlarge') {\n          DomHandler.addClass(badge, 'p-badge-xl');\n          DomHandler.removeClass(badge, 'p-badge-lg');\n        }\n      } else {\n        DomHandler.removeClass(badge, 'p-badge-lg');\n        DomHandler.removeClass(badge, 'p-badge-xl');\n      }\n    }\n    renderBadgeContent() {\n      if (this.disabled) {\n        return null;\n      }\n      const el = this.activeElement;\n      const badge = this.document.createElement('span');\n      badge.id = this.id;\n      badge.className = 'p-badge p-component';\n      this.setSeverity(null, badge);\n      this.setSizeClasses(badge);\n      this.setValue(badge);\n      DomHandler.addClass(el, 'p-overlay-badge');\n      this.renderer.appendChild(el, badge);\n    }\n    setSeverity(oldSeverity, element) {\n      const badge = element ?? this.document.getElementById(this.id);\n      if (!badge) {\n        return;\n      }\n      if (this.severity) {\n        DomHandler.addClass(badge, `p-badge-${this.severity}`);\n      }\n      if (oldSeverity) {\n        DomHandler.removeClass(badge, `p-badge-${oldSeverity}`);\n      }\n    }\n    toggleDisableState() {\n      if (!this.id) {\n        return;\n      }\n      if (this.disabled) {\n        const badge = this.activeElement?.querySelector(`#${this.id}`);\n        if (badge) {\n          this.renderer.removeChild(this.activeElement, badge);\n        }\n      } else {\n        this.renderBadgeContent();\n      }\n    }\n    static ɵfac = function BadgeDirective_Factory(t) {\n      return new (t || BadgeDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: BadgeDirective,\n      selectors: [[\"\", \"pBadge\", \"\"]],\n      hostAttrs: [1, \"p-element\"],\n      inputs: {\n        disabled: [i0.ɵɵInputFlags.None, \"badgeDisabled\", \"disabled\"],\n        badgeSize: \"badgeSize\",\n        size: \"size\",\n        severity: \"severity\",\n        value: \"value\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return BadgeDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Badge is a small status indicator for another element.\n * @group Components\n */\nlet Badge = /*#__PURE__*/(() => {\n  class Badge {\n    /**\n     * Class of the element.\n     * @group Props\n     */\n    styleClass;\n    /**\n     * Inline style of the element.\n     * @group Props\n     */\n    style;\n    /**\n     * Size of the badge, valid options are \"large\" and \"xlarge\".\n     * @group Props\n     */\n    badgeSize;\n    /**\n     * Severity type of the badge.\n     * @group Props\n     */\n    severity;\n    /**\n     * Value to display inside the badge.\n     * @group Props\n     */\n    value;\n    /**\n     * When specified, disables the component.\n     * @group Props\n     */\n    badgeDisabled = false;\n    /**\n     * Size of the badge, valid options are \"large\" and \"xlarge\".\n     * @group Props\n     * @deprecated use badgeSize instead.\n     */\n    set size(value) {\n      this._size = value;\n      console.warn('size property is deprecated and will removed in v18, use badgeSize instead.');\n    }\n    get size() {\n      return this._size;\n    }\n    _size;\n    containerClass() {\n      return {\n        'p-badge p-component': true,\n        'p-badge-no-gutter': this.value != undefined && String(this.value).length === 1,\n        'p-badge-lg': this.badgeSize === 'large' || this.size === 'large',\n        'p-badge-xl': this.badgeSize === 'xlarge' || this.size === 'xlarge',\n        [`p-badge-${this.severity}`]: this.severity\n      };\n    }\n    static ɵfac = function Badge_Factory(t) {\n      return new (t || Badge)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: Badge,\n      selectors: [[\"p-badge\"]],\n      hostAttrs: [1, \"p-element\"],\n      inputs: {\n        styleClass: \"styleClass\",\n        style: \"style\",\n        badgeSize: \"badgeSize\",\n        severity: \"severity\",\n        value: \"value\",\n        badgeDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"badgeDisabled\", \"badgeDisabled\", booleanAttribute],\n        size: \"size\"\n      },\n      features: [i0.ɵɵInputTransformsFeature],\n      decls: 1,\n      vars: 1,\n      consts: [[3, \"ngClass\", \"class\", \"ngStyle\", 4, \"ngIf\"], [3, \"ngClass\", \"ngStyle\"]],\n      template: function Badge_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, Badge_span_0_Template, 2, 5, \"span\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", !ctx.badgeDisabled);\n        }\n      },\n      dependencies: [i1.NgClass, i1.NgIf, i1.NgStyle],\n      styles: [\"@layer primeng{.p-badge{display:inline-block;border-radius:10px;text-align:center;padding:0 .5rem}.p-overlay-badge{position:relative}.p-overlay-badge .p-badge{position:absolute;top:0;right:0;transform:translate(50%,-50%);transform-origin:100% 0;margin:0}.p-badge-dot{width:.5rem;min-width:.5rem;height:.5rem;border-radius:50%;padding:0}.p-badge-no-gutter{padding:0;border-radius:50%}}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return Badge;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet BadgeModule = /*#__PURE__*/(() => {\n  class BadgeModule {\n    static ɵfac = function BadgeModule_Factory(t) {\n      return new (t || BadgeModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: BadgeModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule, SharedModule]\n    });\n  }\n  return BadgeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Badge, BadgeDirective, BadgeModule };\n//# sourceMappingURL=primeng-badge.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}