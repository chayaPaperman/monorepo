{"ast":null,"code":"import { map, catchError, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./_services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(next, state) {\n      const authType = next.data['authType'];\n      return this.authService.checkTokenAndPolicyValidity(authType).pipe(map(isAuthorized => {\n        return true;\n      }), catchError(error => {\n        if (error.status === 401) {\n          console.log(error);\n          this.router.navigate(['/login']);\n          return of(false);\n        } else if (error.status === 403) {\n          console.log(error);\n          this.router.navigate(['/home']);\n          return of(false);\n        } else {\n          return of(false);\n        }\n      }));\n    }\n    static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}