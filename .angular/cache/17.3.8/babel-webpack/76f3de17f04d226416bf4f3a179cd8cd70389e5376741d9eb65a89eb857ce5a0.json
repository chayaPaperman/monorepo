{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { AUTH_ENDPOINT } from '../api-urls';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../_services/hash-password.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  }),\n  withCredentials: true\n};\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, hashSevice, hash) {\n      this.http = http;\n      this.hashSevice = hashSevice;\n      this.hash = hash;\n      this.apiUrl = AUTH_ENDPOINT;\n    }\n    login(email, passwordHash) {\n      passwordHash = this.hashSevice.encryptPassword(passwordHash);\n      return this.http.post(this.apiUrl + '/signin', {\n        email,\n        passwordHash\n      }, httpOptions);\n    }\n    logout() {\n      return this.http.post(this.apiUrl + '/signout', {}, httpOptions);\n    }\n    checkTokenAndPolicyValidity(policy) {\n      const token = JSON.parse(sessionStorage.getItem('auth-user') + '')?.access_token;\n      const headers = {\n        'Authorization': `Bearer ${token}`\n      };\n      const body = {\n        policy\n      };\n      return this.http.post(this.apiUrl + '/validate-token', body, {\n        headers\n      }).pipe(\n        // map(response => {\n        //   if (response.message !== 'Token is valid and policy is valid') {\n        //     return false;\n        //   }\n        //   return true;\n        // })\n      );\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HashPasswordService), i0.ɵɵinject(i2.HashPasswordService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}