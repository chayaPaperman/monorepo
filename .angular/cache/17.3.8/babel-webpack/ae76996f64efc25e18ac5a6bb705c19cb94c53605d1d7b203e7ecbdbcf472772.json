{"ast":null,"code":"import { trigger, transition, style, animate } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, PLATFORM_ID, booleanAttribute, numberAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'primeng/api';\nimport { TranslationKeys } from 'primeng/api';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport * as i3 from 'primeng/autofocus';\nimport { AutoFocusModule } from 'primeng/autofocus';\nimport { ZIndexUtils } from 'primeng/utils';\nconst _c0 = [\"container\"];\nconst _c1 = [\"input\"];\nconst _c2 = [\"colorSelector\"];\nconst _c3 = [\"colorHandle\"];\nconst _c4 = [\"hue\"];\nconst _c5 = [\"hueHandle\"];\nconst _c6 = (a0, a1) => ({\n  \"p-colorpicker p-component\": true,\n  \"p-colorpicker-overlay\": a0,\n  \"p-colorpicker-dragging\": a1\n});\nconst _c7 = a0 => ({\n  \"p-disabled\": a0\n});\nconst _c8 = (a0, a1) => ({\n  \"p-colorpicker-panel\": true,\n  \"p-colorpicker-overlay-panel\": a0,\n  \"p-disabled\": a1\n});\nconst _c9 = (a0, a1) => ({\n  showTransitionParams: a0,\n  hideTransitionParams: a1\n});\nconst _c10 = a0 => ({\n  value: \"visible\",\n  params: a0\n});\nfunction ColorPicker_input_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 9, 1);\n    i0.ɵɵlistener(\"click\", function ColorPicker_input_2_Template_input_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onInputClick());\n    })(\"keydown\", function ColorPicker_input_2_Template_input_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onInputKeydown($event));\n    })(\"focus\", function ColorPicker_input_2_Template_input_focus_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onInputFocus());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r1.inputBgColor);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c7, ctx_r1.disabled))(\"disabled\", ctx_r1.disabled)(\"autofocus\", ctx_r1.autofocus);\n    i0.ɵɵattribute(\"tabindex\", ctx_r1.tabindex)(\"id\", ctx_r1.inputId)(\"data-pc-section\", \"input\")(\"aria-label\", ctx_r1.ariaLabel);\n  }\n}\nfunction ColorPicker_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"click\", function ColorPicker_div_3_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onOverlayClick($event));\n    })(\"@overlayAnimation.start\", function ColorPicker_div_3_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onOverlayAnimationStart($event));\n    })(\"@overlayAnimation.done\", function ColorPicker_div_3_Template_div_animation_overlayAnimation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onOverlayAnimationEnd($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 11)(2, \"div\", 12, 2);\n    i0.ɵɵlistener(\"touchstart\", function ColorPicker_div_3_Template_div_touchstart_2_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onColorDragStart($event));\n    })(\"touchmove\", function ColorPicker_div_3_Template_div_touchmove_2_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDrag($event));\n    })(\"touchend\", function ColorPicker_div_3_Template_div_touchend_2_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDragEnd());\n    })(\"mousedown\", function ColorPicker_div_3_Template_div_mousedown_2_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onColorMousedown($event));\n    });\n    i0.ɵɵelementStart(4, \"div\", 13);\n    i0.ɵɵelement(5, \"div\", 14, 3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 15, 4);\n    i0.ɵɵlistener(\"mousedown\", function ColorPicker_div_3_Template_div_mousedown_7_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onHueMousedown($event));\n    })(\"touchstart\", function ColorPicker_div_3_Template_div_touchstart_7_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onHueDragStart($event));\n    })(\"touchmove\", function ColorPicker_div_3_Template_div_touchmove_7_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDrag($event));\n    })(\"touchend\", function ColorPicker_div_3_Template_div_touchend_7_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onDragEnd());\n    });\n    i0.ɵɵelement(9, \"div\", 16, 5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(10, _c8, !ctx_r1.inline, ctx_r1.disabled))(\"@overlayAnimation\", i0.ɵɵpureFunction1(16, _c10, i0.ɵɵpureFunction2(13, _c9, ctx_r1.showTransitionOptions, ctx_r1.hideTransitionOptions)))(\"@.disabled\", ctx_r1.inline === true);\n    i0.ɵɵattribute(\"data-pc-section\", \"panel\");\n    i0.ɵɵadvance();\n    i0.ɵɵattribute(\"data-pc-section\", \"content\");\n    i0.ɵɵadvance();\n    i0.ɵɵattribute(\"data-pc-section\", \"selector\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"data-pc-section\", \"color\");\n    i0.ɵɵadvance();\n    i0.ɵɵattribute(\"data-pc-section\", \"colorHandle\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"data-pc-section\", \"hue\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"data-pc-section\", \"hueHandle\");\n  }\n}\nconst COLORPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ColorPicker),\n  multi: true\n};\n/**\n * ColorPicker groups a collection of contents in tabs.\n * @group Components\n */\nlet ColorPicker = /*#__PURE__*/(() => {\n  class ColorPicker {\n    document;\n    platformId;\n    el;\n    renderer;\n    cd;\n    config;\n    overlayService;\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    style;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    styleClass;\n    /**\n     * Whether to display as an overlay or not.\n     * @group Props\n     */\n    inline;\n    /**\n     * Format to use in value binding.\n     * @group Props\n     */\n    format = 'hex';\n    /**\n     * Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n     * @group Props\n     */\n    appendTo;\n    /**\n     * When present, it specifies that the component should be disabled.\n     * @group Props\n     */\n    disabled;\n    /**\n     * Index of the element in tabbing order.\n     * @group Props\n     */\n    tabindex;\n    /**\n     * Identifier of the focus input to match a label defined for the dropdown.\n     * @group Props\n     */\n    inputId;\n    /**\n     * Whether to automatically manage layering.\n     * @group Props\n     */\n    autoZIndex = true;\n    /**\n     * Base zIndex value to use in layering.\n     * @group Props\n     */\n    baseZIndex = 0;\n    /**\n     * Transition options of the show animation.\n     * @group Props\n     */\n    showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n    /**\n     * Transition options of the hide animation.\n     * @group Props\n     */\n    hideTransitionOptions = '.1s linear';\n    /**\n     * When present, it specifies that the component should automatically get focus on load.\n     * @group Props\n     */\n    autofocus;\n    /**\n     * Callback to invoke on value change.\n     * @param {ColorPickerChangeEvent} event - Custom value change event.\n     * @group Emits\n     */\n    onChange = new EventEmitter();\n    /**\n     * Callback to invoke on panel is shown.\n     * @group Emits\n     */\n    onShow = new EventEmitter();\n    /**\n     * Callback to invoke on panel is hidden.\n     * @group Emits\n     */\n    onHide = new EventEmitter();\n    containerViewChild;\n    inputViewChild;\n    value = {\n      h: 0,\n      s: 100,\n      b: 100\n    };\n    inputBgColor;\n    shown;\n    overlayVisible;\n    defaultColor = 'ff0000';\n    onModelChange = () => {};\n    onModelTouched = () => {};\n    documentClickListener;\n    documentResizeListener;\n    documentMousemoveListener;\n    documentMouseupListener;\n    documentHueMoveListener;\n    scrollHandler;\n    selfClick;\n    colorDragging;\n    hueDragging;\n    overlay;\n    colorSelectorViewChild;\n    colorHandleViewChild;\n    hueViewChild;\n    hueHandleViewChild;\n    window;\n    constructor(document, platformId, el, renderer, cd, config, overlayService) {\n      this.document = document;\n      this.platformId = platformId;\n      this.el = el;\n      this.renderer = renderer;\n      this.cd = cd;\n      this.config = config;\n      this.overlayService = overlayService;\n      this.window = this.document.defaultView;\n    }\n    set colorSelector(element) {\n      this.colorSelectorViewChild = element;\n    }\n    set colorHandle(element) {\n      this.colorHandleViewChild = element;\n    }\n    set hue(element) {\n      this.hueViewChild = element;\n    }\n    set hueHandle(element) {\n      this.hueHandleViewChild = element;\n    }\n    get ariaLabel() {\n      return this.config?.getTranslation(TranslationKeys.ARIA)[TranslationKeys.SELECT_COLOR];\n    }\n    onHueMousedown(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.bindDocumentMousemoveListener();\n      this.bindDocumentMouseupListener();\n      this.hueDragging = true;\n      this.pickHue(event);\n    }\n    onHueDragStart(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.hueDragging = true;\n      this.pickHue(event, event.changedTouches[0]);\n    }\n    onColorDragStart(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.colorDragging = true;\n      this.pickColor(event, event.changedTouches[0]);\n    }\n    pickHue(event, position) {\n      let pageY = position ? position.pageY : event.pageY;\n      let top = this.hueViewChild?.nativeElement.getBoundingClientRect().top + (this.document.defaultView.pageYOffset || this.document.documentElement.scrollTop || this.document.body.scrollTop || 0);\n      this.value = this.validateHSB({\n        h: Math.floor(360 * (150 - Math.max(0, Math.min(150, pageY - top))) / 150),\n        s: this.value.s,\n        b: this.value.b\n      });\n      this.updateColorSelector();\n      this.updateUI();\n      this.updateModel();\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.getValueToUpdate()\n      });\n    }\n    onColorMousedown(event) {\n      if (this.disabled) {\n        return;\n      }\n      this.bindDocumentMousemoveListener();\n      this.bindDocumentMouseupListener();\n      this.colorDragging = true;\n      this.pickColor(event);\n    }\n    onDrag(event) {\n      if (this.colorDragging) {\n        this.pickColor(event, event.changedTouches[0]);\n        event.preventDefault();\n      }\n      if (this.hueDragging) {\n        this.pickHue(event, event.changedTouches[0]);\n        event.preventDefault();\n      }\n    }\n    onDragEnd() {\n      this.colorDragging = false;\n      this.hueDragging = false;\n      this.unbindDocumentMousemoveListener();\n      this.unbindDocumentMouseupListener();\n    }\n    pickColor(event, position) {\n      let pageX = position ? position.pageX : event.pageX;\n      let pageY = position ? position.pageY : event.pageY;\n      let rect = this.colorSelectorViewChild?.nativeElement.getBoundingClientRect();\n      let top = rect.top + (this.document.defaultView.pageYOffset || this.document.documentElement.scrollTop || this.document.body.scrollTop || 0);\n      let left = rect.left + this.document.body.scrollLeft;\n      let saturation = Math.floor(100 * Math.max(0, Math.min(150, pageX - left)) / 150);\n      let brightness = Math.floor(100 * (150 - Math.max(0, Math.min(150, pageY - top))) / 150);\n      this.value = this.validateHSB({\n        h: this.value.h,\n        s: saturation,\n        b: brightness\n      });\n      this.updateUI();\n      this.updateModel();\n      this.onChange.emit({\n        originalEvent: event,\n        value: this.getValueToUpdate()\n      });\n    }\n    getValueToUpdate() {\n      let val;\n      switch (this.format) {\n        case 'hex':\n          val = '#' + this.HSBtoHEX(this.value);\n          break;\n        case 'rgb':\n          val = this.HSBtoRGB(this.value);\n          break;\n        case 'hsb':\n          val = this.value;\n          break;\n      }\n      return val;\n    }\n    updateModel() {\n      this.onModelChange(this.getValueToUpdate());\n      this.cd.markForCheck();\n    }\n    writeValue(value) {\n      if (value) {\n        switch (this.format) {\n          case 'hex':\n            this.value = this.HEXtoHSB(value);\n            break;\n          case 'rgb':\n            this.value = this.RGBtoHSB(value);\n            break;\n          case 'hsb':\n            this.value = value;\n            break;\n        }\n      } else {\n        this.value = this.HEXtoHSB(this.defaultColor);\n      }\n      this.updateColorSelector();\n      this.updateUI();\n      this.cd.markForCheck();\n    }\n    updateColorSelector() {\n      if (this.colorSelectorViewChild) {\n        const hsb = {};\n        hsb.s = 100;\n        hsb.b = 100;\n        hsb.h = this.value.h;\n        this.colorSelectorViewChild.nativeElement.style.backgroundColor = '#' + this.HSBtoHEX(hsb);\n      }\n    }\n    updateUI() {\n      if (this.colorHandleViewChild && this.hueHandleViewChild?.nativeElement) {\n        this.colorHandleViewChild.nativeElement.style.left = Math.floor(150 * this.value.s / 100) + 'px';\n        this.colorHandleViewChild.nativeElement.style.top = Math.floor(150 * (100 - this.value.b) / 100) + 'px';\n        this.hueHandleViewChild.nativeElement.style.top = Math.floor(150 - 150 * this.value.h / 360) + 'px';\n      }\n      this.inputBgColor = '#' + this.HSBtoHEX(this.value);\n    }\n    onInputFocus() {\n      this.onModelTouched();\n    }\n    show() {\n      this.overlayVisible = true;\n      this.cd.markForCheck();\n    }\n    onOverlayAnimationStart(event) {\n      switch (event.toState) {\n        case 'visible':\n          if (!this.inline) {\n            this.overlay = event.element;\n            this.appendOverlay();\n            if (this.autoZIndex) {\n              ZIndexUtils.set('overlay', this.overlay, this.config.zIndex.overlay);\n            }\n            this.alignOverlay();\n            this.bindDocumentClickListener();\n            this.bindDocumentResizeListener();\n            this.bindScrollListener();\n            this.updateColorSelector();\n            this.updateUI();\n          }\n          break;\n        case 'void':\n          this.onOverlayHide();\n          break;\n      }\n    }\n    onOverlayAnimationEnd(event) {\n      switch (event.toState) {\n        case 'visible':\n          if (!this.inline) {\n            this.onShow.emit({});\n          }\n          break;\n        case 'void':\n          if (this.autoZIndex) {\n            ZIndexUtils.clear(event.element);\n          }\n          this.onHide.emit({});\n          break;\n      }\n    }\n    appendOverlay() {\n      if (this.appendTo) {\n        if (this.appendTo === 'body') this.renderer.appendChild(this.document.body, this.overlay);else DomHandler.appendChild(this.overlay, this.appendTo);\n      }\n    }\n    restoreOverlayAppend() {\n      if (this.overlay && this.appendTo) {\n        this.renderer.appendChild(this.el.nativeElement, this.overlay);\n      }\n    }\n    alignOverlay() {\n      if (this.appendTo) DomHandler.absolutePosition(this.overlay, this.inputViewChild?.nativeElement);else DomHandler.relativePosition(this.overlay, this.inputViewChild?.nativeElement);\n    }\n    hide() {\n      this.overlayVisible = false;\n      this.cd.markForCheck();\n    }\n    onInputClick() {\n      this.selfClick = true;\n      this.togglePanel();\n    }\n    togglePanel() {\n      if (!this.overlayVisible) this.show();else this.hide();\n    }\n    onInputKeydown(event) {\n      switch (event.code) {\n        case 'Space':\n          this.togglePanel();\n          event.preventDefault();\n          break;\n        case 'Escape':\n        case 'Tab':\n          this.hide();\n          break;\n        default:\n          //NoOp\n          break;\n      }\n    }\n    onOverlayClick(event) {\n      this.overlayService.add({\n        originalEvent: event,\n        target: this.el.nativeElement\n      });\n      this.selfClick = true;\n    }\n    registerOnChange(fn) {\n      this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n      this.disabled = val;\n      this.cd.markForCheck();\n    }\n    bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentClickListener = this.renderer.listen(documentTarget, 'click', () => {\n          if (!this.selfClick) {\n            this.overlayVisible = false;\n            this.unbindDocumentClickListener();\n          }\n          this.selfClick = false;\n          this.cd.markForCheck();\n        });\n      }\n    }\n    unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n    bindDocumentMousemoveListener() {\n      if (!this.documentMousemoveListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentMousemoveListener = this.renderer.listen(documentTarget, 'mousemove', event => {\n          if (this.colorDragging) {\n            this.pickColor(event);\n          }\n          if (this.hueDragging) {\n            this.pickHue(event);\n          }\n        });\n      }\n    }\n    unbindDocumentMousemoveListener() {\n      if (this.documentMousemoveListener) {\n        this.documentMousemoveListener();\n        this.documentMousemoveListener = null;\n      }\n    }\n    bindDocumentMouseupListener() {\n      if (!this.documentMouseupListener) {\n        const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n        this.documentMouseupListener = this.renderer.listen(documentTarget, 'mouseup', () => {\n          this.colorDragging = false;\n          this.hueDragging = false;\n          this.unbindDocumentMousemoveListener();\n          this.unbindDocumentMouseupListener();\n        });\n      }\n    }\n    unbindDocumentMouseupListener() {\n      if (this.documentMouseupListener) {\n        this.documentMouseupListener();\n        this.documentMouseupListener = null;\n      }\n    }\n    bindDocumentResizeListener() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.documentResizeListener = this.renderer.listen(this.window, 'resize', this.onWindowResize.bind(this));\n      }\n    }\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        this.documentResizeListener();\n        this.documentResizeListener = null;\n      }\n    }\n    onWindowResize() {\n      if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n        this.hide();\n      }\n    }\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.containerViewChild?.nativeElement, () => {\n          if (this.overlayVisible) {\n            this.hide();\n          }\n        });\n      }\n      this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n    validateHSB(hsb) {\n      return {\n        h: Math.min(360, Math.max(0, hsb.h)),\n        s: Math.min(100, Math.max(0, hsb.s)),\n        b: Math.min(100, Math.max(0, hsb.b))\n      };\n    }\n    validateRGB(rgb) {\n      return {\n        r: Math.min(255, Math.max(0, rgb.r)),\n        g: Math.min(255, Math.max(0, rgb.g)),\n        b: Math.min(255, Math.max(0, rgb.b))\n      };\n    }\n    validateHEX(hex) {\n      var len = 6 - hex.length;\n      if (len > 0) {\n        var o = [];\n        for (var i = 0; i < len; i++) {\n          o.push('0');\n        }\n        o.push(hex);\n        hex = o.join('');\n      }\n      return hex;\n    }\n    HEXtoRGB(hex) {\n      let hexValue = parseInt(hex.indexOf('#') > -1 ? hex.substring(1) : hex, 16);\n      return {\n        r: hexValue >> 16,\n        g: (hexValue & 0x00ff00) >> 8,\n        b: hexValue & 0x0000ff\n      };\n    }\n    HEXtoHSB(hex) {\n      return this.RGBtoHSB(this.HEXtoRGB(hex));\n    }\n    RGBtoHSB(rgb) {\n      var hsb = {\n        h: 0,\n        s: 0,\n        b: 0\n      };\n      var min = Math.min(rgb.r, rgb.g, rgb.b);\n      var max = Math.max(rgb.r, rgb.g, rgb.b);\n      var delta = max - min;\n      hsb.b = max;\n      hsb.s = max != 0 ? 255 * delta / max : 0;\n      if (hsb.s != 0) {\n        if (rgb.r == max) {\n          hsb.h = (rgb.g - rgb.b) / delta;\n        } else if (rgb.g == max) {\n          hsb.h = 2 + (rgb.b - rgb.r) / delta;\n        } else {\n          hsb.h = 4 + (rgb.r - rgb.g) / delta;\n        }\n      } else {\n        hsb.h = -1;\n      }\n      hsb.h *= 60;\n      if (hsb.h < 0) {\n        hsb.h += 360;\n      }\n      hsb.s *= 100 / 255;\n      hsb.b *= 100 / 255;\n      return hsb;\n    }\n    HSBtoRGB(hsb) {\n      var rgb = {\n        r: 0,\n        g: 0,\n        b: 0\n      };\n      let h = hsb.h;\n      let s = hsb.s * 255 / 100;\n      let v = hsb.b * 255 / 100;\n      if (s == 0) {\n        rgb = {\n          r: v,\n          g: v,\n          b: v\n        };\n      } else {\n        let t1 = v;\n        let t2 = (255 - s) * v / 255;\n        let t3 = (t1 - t2) * (h % 60) / 60;\n        if (h == 360) h = 0;\n        if (h < 60) {\n          rgb.r = t1;\n          rgb.b = t2;\n          rgb.g = t2 + t3;\n        } else if (h < 120) {\n          rgb.g = t1;\n          rgb.b = t2;\n          rgb.r = t1 - t3;\n        } else if (h < 180) {\n          rgb.g = t1;\n          rgb.r = t2;\n          rgb.b = t2 + t3;\n        } else if (h < 240) {\n          rgb.b = t1;\n          rgb.r = t2;\n          rgb.g = t1 - t3;\n        } else if (h < 300) {\n          rgb.b = t1;\n          rgb.g = t2;\n          rgb.r = t2 + t3;\n        } else if (h < 360) {\n          rgb.r = t1;\n          rgb.g = t2;\n          rgb.b = t1 - t3;\n        } else {\n          rgb.r = 0;\n          rgb.g = 0;\n          rgb.b = 0;\n        }\n      }\n      return {\n        r: Math.round(rgb.r),\n        g: Math.round(rgb.g),\n        b: Math.round(rgb.b)\n      };\n    }\n    RGBtoHEX(rgb) {\n      var hex = [rgb.r.toString(16), rgb.g.toString(16), rgb.b.toString(16)];\n      for (var key in hex) {\n        if (hex[key].length == 1) {\n          hex[key] = '0' + hex[key];\n        }\n      }\n      return hex.join('');\n    }\n    HSBtoHEX(hsb) {\n      return this.RGBtoHEX(this.HSBtoRGB(hsb));\n    }\n    onOverlayHide() {\n      this.unbindScrollListener();\n      this.unbindDocumentResizeListener();\n      this.unbindDocumentClickListener();\n      this.overlay = null;\n    }\n    ngOnDestroy() {\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n      if (this.overlay && this.autoZIndex) {\n        ZIndexUtils.clear(this.overlay);\n      }\n      this.restoreOverlayAppend();\n      this.onOverlayHide();\n    }\n    static ɵfac = function ColorPicker_Factory(t) {\n      return new (t || ColorPicker)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.PrimeNGConfig), i0.ɵɵdirectiveInject(i1.OverlayService));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: ColorPicker,\n      selectors: [[\"p-colorPicker\"]],\n      viewQuery: function ColorPicker_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(_c2, 5);\n          i0.ɵɵviewQuery(_c3, 5);\n          i0.ɵɵviewQuery(_c4, 5);\n          i0.ɵɵviewQuery(_c5, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.colorSelector = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.colorHandle = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hue = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hueHandle = _t.first);\n        }\n      },\n      hostAttrs: [1, \"p-element\"],\n      inputs: {\n        style: \"style\",\n        styleClass: \"styleClass\",\n        inline: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"inline\", \"inline\", booleanAttribute],\n        format: \"format\",\n        appendTo: \"appendTo\",\n        disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute],\n        tabindex: \"tabindex\",\n        inputId: \"inputId\",\n        autoZIndex: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"autoZIndex\", \"autoZIndex\", booleanAttribute],\n        baseZIndex: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"baseZIndex\", \"baseZIndex\", numberAttribute],\n        showTransitionOptions: \"showTransitionOptions\",\n        hideTransitionOptions: \"hideTransitionOptions\",\n        autofocus: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"autofocus\", \"autofocus\", booleanAttribute]\n      },\n      outputs: {\n        onChange: \"onChange\",\n        onShow: \"onShow\",\n        onHide: \"onHide\"\n      },\n      features: [i0.ɵɵProvidersFeature([COLORPICKER_VALUE_ACCESSOR]), i0.ɵɵInputTransformsFeature],\n      decls: 4,\n      vars: 11,\n      consts: [[\"container\", \"\"], [\"input\", \"\"], [\"colorSelector\", \"\"], [\"colorHandle\", \"\"], [\"hue\", \"\"], [\"hueHandle\", \"\"], [3, \"ngStyle\", \"ngClass\"], [\"type\", \"text\", \"class\", \"p-colorpicker-preview p-inputtext\", \"readonly\", \"readonly\", \"pAutoFocus\", \"\", 3, \"ngClass\", \"disabled\", \"backgroundColor\", \"autofocus\", \"click\", \"keydown\", \"focus\", 4, \"ngIf\"], [3, \"ngClass\", \"click\", 4, \"ngIf\"], [\"type\", \"text\", \"readonly\", \"readonly\", \"pAutoFocus\", \"\", 1, \"p-colorpicker-preview\", \"p-inputtext\", 3, \"click\", \"keydown\", \"focus\", \"ngClass\", \"disabled\", \"autofocus\"], [3, \"click\", \"ngClass\"], [1, \"p-colorpicker-content\"], [1, \"p-colorpicker-color-selector\", 3, \"touchstart\", \"touchmove\", \"touchend\", \"mousedown\"], [1, \"p-colorpicker-color\"], [1, \"p-colorpicker-color-handle\"], [1, \"p-colorpicker-hue\", 3, \"mousedown\", \"touchstart\", \"touchmove\", \"touchend\"], [1, \"p-colorpicker-hue-handle\"]],\n      template: function ColorPicker_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 6, 0);\n          i0.ɵɵtemplate(2, ColorPicker_input_2_Template, 2, 11, \"input\", 7)(3, ColorPicker_div_3_Template, 11, 18, \"div\", 8);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassMap(ctx.styleClass);\n          i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction2(8, _c6, !ctx.inline, ctx.colorDragging || ctx.hueDragging));\n          i0.ɵɵattribute(\"data-pc-name\", \"colorpicker\")(\"data-pc-section\", \"root\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", !ctx.inline);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.inline || ctx.overlayVisible);\n        }\n      },\n      dependencies: [i2.NgClass, i2.NgIf, i2.NgStyle, i3.AutoFocus],\n      styles: [\"@layer primeng{.p-colorpicker{display:inline-block}.p-colorpicker-dragging{cursor:pointer}.p-colorpicker-overlay{position:relative}.p-colorpicker-panel{position:relative;width:193px;height:166px}.p-colorpicker-overlay-panel{position:absolute;top:0;left:0}.p-colorpicker-preview{cursor:pointer}.p-colorpicker-panel .p-colorpicker-content{position:relative}.p-colorpicker-panel .p-colorpicker-color-selector{width:150px;height:150px;top:8px;left:8px;position:absolute}.p-colorpicker-panel .p-colorpicker-color{width:150px;height:150px}.p-colorpicker-panel .p-colorpicker-color-handle{position:absolute;top:0;left:150px;border-radius:100%;width:10px;height:10px;border-width:1px;border-style:solid;margin:-5px 0 0 -5px;cursor:pointer;opacity:.85}.p-colorpicker-panel .p-colorpicker-hue{width:17px;height:150px;top:8px;left:167px;position:absolute;opacity:.85}.p-colorpicker-panel .p-colorpicker-hue-handle{position:absolute;top:150px;left:0;width:21px;margin-left:-2px;margin-top:-5px;height:10px;border-width:2px;border-style:solid;opacity:.85;cursor:pointer}}\\n\"],\n      encapsulation: 2,\n      data: {\n        animation: [trigger('overlayAnimation', [transition(':enter', [style({\n          opacity: 0,\n          transform: 'scaleY(0.8)'\n        }), animate('{{showTransitionParams}}')]), transition(':leave', [animate('{{hideTransitionParams}}', style({\n          opacity: 0\n        }))])])]\n      },\n      changeDetection: 0\n    });\n  }\n  return ColorPicker;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ColorPickerModule = /*#__PURE__*/(() => {\n  class ColorPickerModule {\n    static ɵfac = function ColorPickerModule_Factory(t) {\n      return new (t || ColorPickerModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ColorPickerModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule, AutoFocusModule]\n    });\n  }\n  return ColorPickerModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { COLORPICKER_VALUE_ACCESSOR, ColorPicker, ColorPickerModule };\n//# sourceMappingURL=primeng-colorpicker.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}