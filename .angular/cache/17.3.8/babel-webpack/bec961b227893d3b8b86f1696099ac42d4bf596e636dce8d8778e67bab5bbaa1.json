{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ClientService = /*#__PURE__*/(() => {\n  class ClientService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3000/clients'; // Base URL for the Client API\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }) // Define headers for HTTP requests\n      };\n    }\n    // Create a new Client\n    createClient(client) {\n      return this.http.post(this.apiUrl, client, this.httpOptions).pipe(catchError(this.handleError('createClient')));\n    }\n    // Get all Clients\n    getAllClients() {\n      return this.http.get(`${this.apiUrl}`).pipe(catchError(this.handleError('getAllClients', [])));\n    }\n    // Search for a Client by ID\n    searchClient(id) {\n      return this.http.post(`${this.apiUrl}/searchClient`, {\n        id\n      }, this.httpOptions).pipe(catchError(this.handleError('searchClient', [])));\n    }\n    // Update an existing Client\n    updateClient(client) {\n      return this.http.put(`${this.apiUrl}`, client, this.httpOptions).pipe(catchError(this.handleError('updateClient')));\n    }\n    // Delete a Client by ID\n    deleteClient(id) {\n      return this.http.delete(`${this.apiUrl}`, {\n        ...this.httpOptions,\n        body: {\n          id\n        }\n      }).pipe(catchError(this.handleError('deleteClient', false)));\n    }\n    // Error handling function\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(`${operation} failed: ${error.message}`); // Log error message to console\n        return of(result); // Return default result to keep the app running\n      };\n    }\n    static #_ = this.ɵfac = function ClientService_Factory(t) {\n      return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ClientService,\n      factory: ClientService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ClientService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}