{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { debounceTime } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../_services/client.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"primeng/api\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"primeng/autocomplete\";\nfunction ClientSearchComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const client_r1 = ctx.$implicit;\n    i0.ɵɵtextInterpolate2(\" client name - \", client_r1.name, \" | client.businessName - \", client_r1.businessName, \" \");\n  }\n}\nfunction ClientSearchComponent_li_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 10);\n    i0.ɵɵlistener(\"click\", function ClientSearchComponent_li_12_Template_li_click_0_listener() {\n      const client_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.selectClientFromList(client_r3));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const client_r3 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" client name - \", client_r3.name, \" | client.businessName - \", client_r3.businessName, \" \");\n  }\n}\nexport let ClientSearchComponent = /*#__PURE__*/(() => {\n  class ClientSearchComponent {\n    constructor(clientService, router, primengConfig) {\n      this.clientService = clientService;\n      this.router = router;\n      this.primengConfig = primengConfig;\n      this.clients = [];\n      this.filteredClients = [];\n      this.searchName = new FormControl('');\n      this.selectedClient = null;\n    }\n    ngOnInit() {\n      this.primengConfig.ripple = true; // Enable Ripple effect globally\n      this.searchName.valueChanges.pipe(debounceTime(300)).subscribe(value => {\n        if (value !== null) {\n          this.filterClients(value); // Pass the value directly to filterClients\n        }\n      });\n      this.loadAllClients();\n    }\n    loadAllClients() {\n      this.clientService.getAllClients().subscribe(clients => {\n        this.clients = clients;\n      });\n    }\n    filterClients(value) {\n      if (value !== null) {\n        const query = value.toLowerCase();\n        this.filteredClients = this.clients.filter(client => client.name && client.name.toLowerCase().includes(query) || client.businessName && client.businessName.toLowerCase().includes(query));\n      }\n    }\n    selectClient(event) {\n      const client = event.value;\n      this.router.navigate(['clientSearch/clientManagement'], {\n        state: {\n          client\n        }\n      });\n    }\n    selectClientFromList(client) {\n      this.router.navigate(['clientSearch/clientManagement'], {\n        state: {\n          client\n        }\n      });\n    }\n    static #_ = this.ɵfac = function ClientSearchComponent_Factory(t) {\n      return new (t || ClientSearchComponent)(i0.ɵɵdirectiveInject(i1.ClientService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.PrimeNGConfig));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ClientSearchComponent,\n      selectors: [[\"app-client-search\"]],\n      decls: 13,\n      vars: 5,\n      consts: [[1, \"container\"], [1, \"row\"], [1, \"col\"], [\"for\", \"searchName\"], [\"placeholder\", \"Search clients\", \"field\", \"name\", 3, \"ngModelChange\", \"completeMethod\", \"onSelect\", \"ngModel\", \"suggestions\", \"minLength\", \"dropdown\"], [\"pTemplate\", \"item\"], [1, \"row\", \"mt-3\"], [1, \"col-12\"], [1, \"list-group\"], [\"class\", \"list-group-item\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", 3, \"click\"]],\n      template: function ClientSearchComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"label\", 3);\n          i0.ɵɵtext(4, \"Search by Name:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p-autoComplete\", 4);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function ClientSearchComponent_Template_p_autoComplete_ngModelChange_5_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.selectedClient, $event) || (ctx.selectedClient = $event);\n            return $event;\n          });\n          i0.ɵɵlistener(\"completeMethod\", function ClientSearchComponent_Template_p_autoComplete_completeMethod_5_listener($event) {\n            return ctx.filterClients($event.query);\n          })(\"onSelect\", function ClientSearchComponent_Template_p_autoComplete_onSelect_5_listener($event) {\n            return ctx.selectClient($event);\n          });\n          i0.ɵɵtemplate(6, ClientSearchComponent_ng_template_6_Template, 1, 2, \"ng-template\", 5);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"div\", 6)(8, \"div\", 7)(9, \"h3\");\n          i0.ɵɵtext(10, \"Clients List\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"ul\", 8);\n          i0.ɵɵtemplate(12, ClientSearchComponent_li_12_Template, 2, 2, \"li\", 9);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.selectedClient);\n          i0.ɵɵproperty(\"suggestions\", ctx.filteredClients)(\"minLength\", 1)(\"dropdown\", true);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.clients);\n        }\n      },\n      dependencies: [i3.PrimeTemplate, i4.NgForOf, i5.NgControlStatus, i5.NgModel, i6.AutoComplete],\n      styles: [\".search-container[_ngcontent-%COMP%]{margin-bottom:20px}.search-results[_ngcontent-%COMP%]{border:1px solid #ccc;padding:10px;max-height:200px;overflow-y:auto}.search-results[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{list-style-type:none;padding:0}.search-results[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{cursor:pointer;padding:5px}.search-results[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:hover{background-color:#f0f0f0}\"]\n    });\n  }\n  return ClientSearchComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}