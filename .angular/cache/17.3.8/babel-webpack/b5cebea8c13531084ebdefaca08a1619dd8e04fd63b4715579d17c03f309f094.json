{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u05EA\\u05DB\\u05E0\\u05D5\\u05EA/the monorepo project/monorepo/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../_services/document.service\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"primeng/fileupload\";\nconst _c0 = () => ({\n  \"margin-bottom\": \"20px\"\n});\nexport let UploadDocComponent = /*#__PURE__*/(() => {\n  class UploadDocComponent {\n    constructor(documentService, sanitizer) {\n      this.documentService = documentService;\n      this.sanitizer = sanitizer;\n      this.uploadedFiles = [];\n      this.fileUrl = null;\n      this.fileType = null;\n      this.client = null;\n    }\n    ngOnInit() {\n      this.client = history.state.client;\n    }\n    onFileSelect(event) {\n      this.uploadedFiles = event.files;\n    }\n    upload() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const formData = new FormData();\n        formData.append('file', _this.uploadedFiles[0], _this.uploadedFiles[0].name);\n        formData.append('clientId', '66736be50b08eb4fb7fd2e51');\n        (yield _this.documentService.uploadFile(formData)).subscribe({\n          next: response => {\n            console.log('File uploaded successfully', response);\n            const fileId = response.fileId;\n            _this.documentService.getviewLink(fileId);\n          },\n          error: err => {\n            console.error('Error uploading file', err);\n          },\n          complete: () => {\n            console.log('Upload complete');\n          }\n        });\n      })();\n    }\n    viewFile(fileId) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.documentService.viewFile(fileId).subscribe({\n          next: response => {\n            const blob = new Blob([response], {\n              type: response.type\n            });\n            const url = window.URL.createObjectURL(blob);\n            _this2.fileUrl = _this2.sanitizer.bypassSecurityTrustResourceUrl(url);\n            _this2.fileType = response.type;\n          },\n          error: error => {\n            console.error('Error fetching file', error);\n          }\n        });\n      })();\n    }\n    static #_ = this.ɵfac = function UploadDocComponent_Factory(t) {\n      return new (t || UploadDocComponent)(i0.ɵɵdirectiveInject(i1.DocumentService), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: UploadDocComponent,\n      selectors: [[\"app-upload-doc\"]],\n      decls: 1,\n      vars: 5,\n      consts: [[\"name\", \"file\", \"chooseIcon\", \"pi pi-cloud-upload\", \"chooseLabel\", \" \", 3, \"onSelect\", \"uploadHandler\", \"customUpload\", \"auto\"]],\n      template: function UploadDocComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p-fileUpload\", 0);\n          i0.ɵɵlistener(\"onSelect\", function UploadDocComponent_Template_p_fileUpload_onSelect_0_listener($event) {\n            return ctx.onFileSelect($event);\n          })(\"uploadHandler\", function UploadDocComponent_Template_p_fileUpload_uploadHandler_0_listener() {\n            return ctx.upload();\n          });\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction0(4, _c0));\n          i0.ɵɵproperty(\"customUpload\", true)(\"auto\", true);\n        }\n      },\n      dependencies: [i3.FileUpload]\n    });\n  }\n  return UploadDocComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}