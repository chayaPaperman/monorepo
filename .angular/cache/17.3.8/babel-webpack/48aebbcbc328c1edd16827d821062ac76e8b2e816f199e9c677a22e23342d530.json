{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let CommunicationService = /*#__PURE__*/(() => {\n  class CommunicationService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3000/communications';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    getAllCommunications() {\n      return this.http.post(`${this.apiUrl}/all`, {}).pipe(catchError(this.handleError('getAllCommunications', [])));\n    }\n    getCommunicationsByClientId(clientId) {\n      return this.http.post(`${this.apiUrl}/by-client`, {\n        clientId\n      }, this.httpOptions).pipe(catchError(this.handleError('getCommunicationsByClientId', [])));\n    }\n    createCommunication(communication) {\n      return this.http.post(`${this.apiUrl}/create`, communication, this.httpOptions).pipe(catchError(this.handleError('createCommunication')));\n    }\n    updateCommunication(id, communication) {\n      return this.http.post(`${this.apiUrl}/update`, {\n        id,\n        ...communication\n      }, this.httpOptions).pipe(catchError(this.handleError('updateCommunication')));\n    }\n    deleteCommunication(id) {\n      return this.http.post(`${this.apiUrl}/delete`, {\n        id\n      }, this.httpOptions).pipe(catchError(this.handleError('deleteCommunication')));\n    }\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(`${operation} failed: ${error.message}`);\n        return of(result);\n      };\n    }\n    static #_ = this.ɵfac = function CommunicationService_Factory(t) {\n      return new (t || CommunicationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CommunicationService,\n      factory: CommunicationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return CommunicationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}